
Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.






# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        #找差值，找到以后同时向后移，找相同的。
        if (headA is None) or (headB is None):
            return None
        
        lena, lenb = get_len(headA, headB)
        c = lena - lenb
        i = 0
        if c > 0:
            while i<c:
                headA = headA.next
                i+=1
        if c < 0:
            while i< -(c):
                headB = headB.next
                i+=1
        
        while headA:
            if headA == headB:
                return headA
            else:
                headA = headA.next
                headB = headB.next
        

def get_len(headA, headB):
    lena = 0
    lenb = 0

    while headA:
        lena += 1
        headA = headA.next

    while headB:
        lenb += 1
        headB = headB.next

    return lena, lenb
            
        
