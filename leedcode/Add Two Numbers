You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

answer:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        up = 0
        
        a = l1.val
        b = l2.val
        
        if a + b+ up >= 10:
            s = a + b + up - 10 
            up = 1
        else:
            s = a + b + up
            up = 0
        
        out = ListNode(s)
        n = out
        
        start = 1
        
        while start:
            if (l1.next): 
                if (l2.next):
                    l1 = l1.next
                    l2 = l2.next
                    a = l1.val
                    b = l2.val
                else:
                    l1 = l1.next
                    a = l1.val
                    b = 0
            elif (l2.next):
                    l2 = l2.next
                    a = 0
                    b = l2.val
            elif up == 1:
                a = 0
                b = 0
            else:    
                break
                    
            if a + b + up >= 10:
                s = a + b + up - 10
                up = 1
            else:
                s = a + b + up
                up = 0
            
            n.next = ListNode(s)
            n = n.next
            
        return out
